<?php
// $Id$

/**
 * @file
 * Contains necessary hook implementations, callbacks & helpers.
 *
 * @todo Implement hook_help().
 */

/**
 * Implements hook_perm().
 */
function inbound_checker_perm() {
  return array('administer inbound cheker');
}

/**
 * Implements hook_menu().
 */
function inbound_checker_menu() {
  $items = array();

  $items['admin/reports/inbound-links'] =
  $items['admin/reports/inbound-links/sites'] = array(
    'title' => 'Inbound Links',
    'description' => 'A report of website inbound links.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inbound_checker_form_list'),
    'access arguments' => array('administer inbound cheker'),
    'file' => 'inbound_checker.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  $items['admin/reports/inbound-links/sites']['type'] = MENU_DEFAULT_LOCAL_TASK;

  $items['admin/reports/inbound-links/add'] = array(
    'title' => 'Add site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inbound_checker_form_add'),
    'access arguments' => array('administer inbound cheker'),
    'file' => 'inbound_checker.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/reports/inbound-links/settings'] = array(
    'title' => 'Settings',
    'description' => 'Inbound link checker configuration settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inbound_checker_form_settings'),
    'access arguments' => array('administer inbound cheker'),
    'file' => 'inbound_checker.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function inbound_checker_cron() {
  // TODO: Breakout the logic into a separate API function.
  inbound_checker_form_list_submit($form, &$form_state);
}

/**
 * Helper function to save a linker website info.
 *
 * @param $link
 *   Site link object.
 *
 * @see drupal_write_record()
 */
function _inbound_checker_site_save($link) {
  $site = (object) $site;
  drupal_write_record('inbound_checker', $link);
}

/**
 * Helper function to theme a table for sites listing.
 *
 * @return
 *   Sites themed output.
 */
function _inbound_checker_sites_table() {
  // TODO: Check the logic.
  // TODO: Consider implementing hook_theme(), if required.

  $rows = array();
  $header = array(
    '',
    t('Site name'),
    t('Site address'),
    t('Number of links'),
    t('Expire date'),
  );

  $results = db_query("SELECT * FROM {inbound_checker}");
  $link_class = '';
  $count = 1;
  while ($result = db_fetch_object($results)) {
    $class = ($result->icid > 0) ? 'ok' : 'warning';
    if ($result->expiry < time()) {
      $class = 'error';
    }
    $rows[] = array(
      'data' => array(
        $count,
        check_plain($result->site_name),
        check_plain($result->site_address),
        check_plain($result->icid),
        check_plain(format_date($result->expiry)),
      ),
      'class' => $class,
    );
    ++$count;
  }

  if (empty($rows)) {
    return t('Nothing to show, Add your website in "Add site" tab.');
  }
  else {
    return theme('table', $header, $rows);
  }
}

/**
 * Batch processing helper.
 *
 * @param $result
 *   Site info object.
 *
 * @todo Rename!!
 */
function _inbound_checker_getlinks_batch($result) {
  // TODO: Check the logic.
  // TODO: Provide the option to fetch contents usng CURL.
  dpm($batch);
  $sitecontent = file_get_contents($result->site_address);

  $icid = substr_count($sitecontent, variable_get('inbound_checker_keyword', ''));
  db_query("UPDATE {inbound_checker} SET icid = %d WHERE site_address = '%s'", array(
    $icid,
    $result->site_address,
    )
  );
}

